name: build-ubuntu-16.04-SERIALIZATION
on:
  push:
    branches:
      - dev
      - release-*
      - refs/tags/*
      - rd/gha_workflow_cleanup
  pull_request:
    branches:
      - '*'  # must quote since "*" is a YAML reserved character; we want a string
env:
  TILEDB_SERIALIZATION: ON
  TILEDB_S3: ON
  CXX: g++
  BACKWARDS_COMPATIBILITY_ARRAYS: ON

jobs:
  build:
    runs-on: ubuntu-16.04
    if: ${{ startsWith(github.ref , 'refs/tags') != true && startsWith(github.ref , 'build-') != true }}
    timeout-minutes: 90
    name: Build - ubuntu-16.04 - SERIALIZATION
    steps:
      - uses: actions/checkout@v2
      - name: 'Print env'
        run: |
          echo "'uname -s' is:"
          echo "uname: " $(uname)
          echo "uname -m: " $(uname -m)
          echo "uname -r:" $(uname -r)
          echo "uname -s: " $(uname -s)
          echo "uname -v: " $(uname -v)
          printenv
        shell: bash

      # Need this for virtualenv and arrow tests if enabled
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - run: |
          set -e pipefail
          python -m pip install --upgrade pip virtualenv
        shell: bash

      - name: Check formatting (linux only)'
        run: |
          set -e pipefail
          # Install clang-format (v5.0)
          ls -la
          sudo ./scripts/install-clangformat.sh
          src=$GITHUB_WORKSPACE
          cd $src
          $src/scripts/run-clang-format.sh $src clang-format-5.0 0 \
            $(find $src/tiledb $src/test/src $src/examples $src/tools \
             -name "*.cc" -or -name "*.c" -or -name "*.h")
        shell: bash
        if: ${{ runner.os == 'Linux' }}

      - name: 'Install doxygen (linux only)'
        run: |
          set -e pipefail
          # Install doxygen *before* running cmake
          sudo apt-get install doxygen
        shell: bash
        if: ${{ runner.os == 'Linux' }}

      - name: 'Build and test libtiledb'
        id: test
        run: |

          git clone https://github.com/TileDB-Inc/TileDB-Unit-Test-Arrays.git --branch 2.2.0 test/inputs/arrays/read_compatibility_test

          #   name: 'Clone Unit-Test-Arrays'

          # Set up arguments for bootstrap.sh
          bootstrap_args="--enable=verbose";
          # Add serialization flag if necessary
          bootstrap_args="${bootstrap_args} --enable-serialization";


          # name: 'Install dependencies'

          mkdir -p $GITHUB_WORKSPACE/build
          cd $GITHUB_WORKSPACE/build

          # Configure and build TileDB
          echo "Bootstrapping with '$bootstrap_args'"
          $GITHUB_WORKSPACE/bootstrap $bootstrap_args

          make -j4
          make examples -j4
          make -C tiledb install

          #- run: |
          cd $GITHUB_WORKSPACE/build
          ls -la

          make -j4 -C tiledb tiledb_unit

          # Bypass Catch2 Framework stdout interception with awk on test output
          # make check | awk '/1: ::set-output/{sub(/.*1: /, ""); print; next} 1'
          ./tiledb/test/tiledb_unit -d yes | awk '/1: ::set-output/{sub(/.*1: /, ""); print; next} 1'


          # - bash: |
          pushd $GITHUB_WORKSPACE/examples/cmake_project
          mkdir build && cd build
          cmake -DCMAKE_PREFIX_PATH=$GITHUB_WORKSPACE/dist .. && make
          ./ExampleExe
          popd
          # Build and run the PNG ingestion example.
          # libpng (example dependency)
          sudo apt-get install libpng-dev

          pushd $GITHUB_WORKSPACE/examples/png_ingestion;
          mkdir build && cd build;
          cmake -DCMAKE_PREFIX_PATH=$GITHUB_WORKSPACE/dist .. && make;
          ./tiledb_png $GITHUB_WORKSPACE/doc/source/figures/Scarlet-Macaw-small.png /tmp/pngarray output.png;
          popd;

          source scripts/ci_build.sh;

      - name: 'Build docs (no deployment)'
        run: |
          set -e pipefail
          python -m pip install --upgrade pip virtualenv

          # Build the documentation (this does not deploy to RTD).
          pushd $GITHUB_WORKSPACE/doc;
          ./local-build.sh;
          popd;
        if: ${{ runner.os == 'Linux' }}
